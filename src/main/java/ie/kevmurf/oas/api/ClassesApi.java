/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.21-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ie.kevmurf.oas.api;

import ie.kevmurf.oas.model.ClassApiSpec;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-07-08T15:58:36.640+01:00[Europe/London]")
@Api(value = "classes", description = "the classes API")
public interface ClassesApi {

    @ApiOperation(value = "Creates a new class.", nickname = "createClass", notes = "", response = ClassApiSpec.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = ClassApiSpec.class) })
    @RequestMapping(value = "/classes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ClassApiSpec> createClass(@ApiParam(value = ""  )  @Valid @RequestBody ClassApiSpec body
);


    @ApiOperation(value = "Delete a class.", nickname = "deleteClass", notes = "", tags={  })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/classes/{classId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteClass(@Min(1)@ApiParam(value = "The ID of the class to delete.",required=true, allowableValues="") @PathVariable("classId") Integer classId
);


    @ApiOperation(value = "Returns a class by ID.", nickname = "getClassById", notes = "", response = ClassApiSpec.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ClassApiSpec.class),
        @ApiResponse(code = 400, message = "The specified class ID is invalid (e.g. not a number)."),
        @ApiResponse(code = 404, message = "A class with the specified ID was not found."),
        @ApiResponse(code = 200, message = "Unexpected error") })
    @RequestMapping(value = "/classes/{classId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ClassApiSpec> getClassById(@Min(1)@ApiParam(value = "The ID of the class to retrieve.",required=true, allowableValues="") @PathVariable("classId") Integer classId
);


    @ApiOperation(value = "Returns a list of classes.", nickname = "getClasses", notes = "", response = ClassApiSpec.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ClassApiSpec.class, responseContainer = "List") })
    @RequestMapping(value = "/classes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ClassApiSpec>> getClasses();


    @ApiOperation(value = "Update / Replace a class.", nickname = "updateClass", notes = "", tags={  })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/classes/{classId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateClass(@Min(1)@ApiParam(value = "The ID of the class to update.",required=true, allowableValues="") @PathVariable("classId") Integer classId
,@ApiParam(value = ""  )  @Valid @RequestBody ClassApiSpec body
);

}

